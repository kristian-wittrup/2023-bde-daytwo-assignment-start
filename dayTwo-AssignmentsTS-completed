//Assignment 1: Function Signatures
/*
/**
 * Assignment Description:
 * Your task is to define a function signature CalculateSumFunction that takes two numbers as parameters and returns their sum. After defining the function signature, implement a function calculateSum that adheres to this signature. Test your function by adding two numbers and display the sum.
 * 
 * */
 
// Completed Assignment
type CalculateSumFunction = (a: number, b: number) => number;
const calculateSum: CalculateSumFunction = (a, b) => {
  return a + b;
};
const result: number = calculateSum(5, 10);
console.log("Sum:", result);



//Assignment 2: DOM & Type Casting
/*
Assignment Description:
In this assignment, you'll work with the DOM and type casting. Create an HTML element with the id "yourElementId" and type cast it to an HTMLElement. Change the background color of this element to green.*/

// Completed Assignment
// Assignment Template
const yourElement = document.getElementById("yourElementId"); // Some type casting here missing
if (yourElement) {
  yourElement.style.backgroundColor = "green";
}


// Assignment 3: Classes
/*
Assignment Description:
Classes are fundamental in TypeScript. Your task is to create a class YourClass with properties yourProperty. Implement a method displayProperty that displays the property. Instantiate an object of the YourClass class and call the displayProperty method.
*/
// Completed Assignment
class YourClass {
  yourProperty: string;

  constructor(property: string) {
    this.yourProperty = property;
  }
  displayProperty(): void {
    console.log(`Your property: ${this.yourProperty}`);
  }
}

const yourObject = new YourClass("Example");
yourObject.displayProperty();




//Assignment 4: Public, Private, and Readonly

// Completed Assignment
class Employee {
  public employeeName: string;
  private employeeId: number;
  constructor(name: string, id: number) {
    this.employeeName = name;
    this.employeeId = id;
  }
  displayEmployeeDetails(): void {
    console.log(`Employee ID: ${this.employeeId}, Name: ${this.employeeName}`);
  }
}

const employee = new Employee("Alice Smith", 456);
employee.displayEmployeeDetails();





/**
 * 
 * Assignment 5: Modules
 * Assignment Description:
 * Modules help organize code. Your task is to create a TypeScript module that exports a function to perform a specific calculation. Import this function into another file, use it to perform a calculation, and display the result.
 * 
 */

//Assignment 5: Modules
// Completed Assignment
// yourModule.ts

export function yourFunction(input: any): any {
  // Your implementation here
  return input;
}

// main.ts
import { yourFunction } from './yourModule';

const result = yourFunction(/* Provide an input */);
console.log("Result:", result);





/**
 * Assignment 6: Interface
 * Assignment Description:
 * Interfaces are essential in TypeScript. Define an interface YourInterface with properties yourProperty1 and yourProperty2. Create a class YourClass that implements this interface and uses these properties. Instantiate a YourClass object and display its properties.
 */


// Completed Assignment
interface YourInterface {
  name: string;
  calculateSomething(): number;
}

class YourClass implements YourInterface {
  name: string;

  constructor(name: string) {
    this.name = name;
  }

  calculateSomething(): number {
    // Your implementation here
    return 42;
  }
}

const yourInstance = new YourClass("Example");
console.log("Your Instance:", yourInstance.calculateSomething());



/**
 * 
 * Assignment 7: Interface with Classes
 * Assignment Description:
 * Understanding how interfaces work with classes is crucial. Define an interface YourInterface with properties property1, property2, and a method yourMethod. Create a class YourClass that implements this interface and displays the properties using the yourMethod. Instantiate a YourClass object and call the yourMethod.
 */

// Completed Assignment
interface YourInterface {
  property1: string;
  property2: number;
  yourMethod(): void;
}

class YourClass implements YourInterface {
  property1: string;
  property2: number;

  constructor(prop1: string, prop2: number) {
    this.property1 = prop1;
    this.property2 = prop2;
  }

  yourMethod(): void {
    console.log(`Property 1: ${this.property1}, Property 2: ${this.property2}`);
  }
}

const yourInstance = new YourClass("Value 1", 42);
yourInstance.yourMethod();
